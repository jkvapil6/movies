{"version":3,"sources":["components/MoviesList.js","pages/welcome.js","pages/search.js","pages/movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviesList","props","moviesList","movies","length","map","m","key","id","className","style","width","float","margin","to","title","slice","concat","height","display","padding","src","poster_path","alt","Welcome","useState","popularMovies","setPopularMovies","useEffect","fetchMovies","a","fetch","then","response","json","data","results","onClick","console","log","Search","href","role","Movie","match","movie","setMovie","fetchMovie","params","App","type","placeholder","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29e3dde9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n///\r\n/// Component displays movies\r\n///\r\nconst MoviesList = (props) => {\r\n\r\n  let moviesList\r\n\r\n  if (props.movies.length > 0) {\r\n    moviesList = props.movies.map(m => (\r\n      <div key={m.id} className=\"card mb-3\" style={{width: 200, float: 'left', margin: 10}}>\r\n        <Link to={`/movie/${m.id}`}>\r\n          <h5 className=\"card-header\">\r\n            { m.title.length < 18 ? m.title : m.title.slice(0, 15).concat('...') }\r\n          </h5>\r\n        </Link>\r\n        <img \r\n          style={{width: 185, height: 288, display: 'block', padding: 10}} \r\n          src={`http://image.tmdb.org/t/p/w185//`.concat(m.poster_path)} \r\n          alt=\"movie card\" \r\n        />\r\n      </div>\r\n    ))\r\n  } else {\r\n    moviesList = <h2>Did not find any movies :(</h2>\r\n  }\r\n\r\n  return (\r\n    <div style={{float: 'left'}}>\r\n      <h1>{props.title}</h1>\r\n      {moviesList}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MoviesList;\r\n","import React, { useState, useEffect } from 'react'\r\n// import logo from './logo.svg'\r\n\r\nimport '../styles/bootstrap.min.css'\r\nimport '../App.css'\r\n\r\nimport MoviesList from '../components/MoviesList'\r\n\r\nconst api_key = '8da605a5d9396912aa1f7532d10a9839'\r\n\r\n///\r\n/// Welcome page\r\n///\r\nconst Welcome = () => {\r\n\r\n  /// DATA\r\n  \r\n  const [popularMovies, setPopularMovies] = useState([])\r\n\r\n  /// SIDE EFFECTS\r\n\r\n  useEffect(() => {\r\n    fetchMovies()\r\n  }, [])\r\n\r\n  /////////////////////////////////////////////\r\n\r\n  ///\r\n  /// Loads movies immediately when component is loaded \r\n  ///\r\n  const fetchMovies = async () => {\r\n    fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${api_key}&language=en-US&page=1`)\r\n    .then(response => response.json())\r\n    .then(data => setPopularMovies(data.results))\r\n  }\r\n\r\n  /////////////////////////////////////////////\r\n  \r\n  ///\r\n  /// Test function\r\n  ///\r\n  const init = () => {\r\n    console.log(popularMovies)\r\n  }\r\n\r\n  /////////////////////////////////////////////\r\n  /////////////////////////////////////////////\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={init}>Click me</button>\r\n      \r\n      <MoviesList \r\n        title=\"Popular movies\"\r\n        movies={popularMovies}\r\n      />\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Welcome\r\n","import React, { useState, useEffect } from 'react';\r\n// import logo from './logo.svg';\r\n\r\nimport '../styles/bootstrap.min.css'\r\nimport '../App.css';\r\n\r\nimport MoviesList from '../components/MoviesList'\r\n\r\nconst api_key = '8da605a5d9396912aa1f7532d10a9839'\r\n\r\n///\r\n/// Search page\r\n///\r\nconst Search = () => {\r\n\r\n  /// DATA\r\n  const [popularMovies, setPopularMovies] = useState([])\r\n\r\n  ///\r\n  /// Loads movies immediately when component is loaded \r\n  ///\r\n  useEffect(() => {\r\n    fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${api_key}&language=en-US&page=1`)\r\n      .then(response => response.json())\r\n      .then(data => setPopularMovies(data.results))\r\n  }, [])\r\n\r\n\r\n  const init = () => {\r\n    // fetch(`https://api.themoviedb.org/3/movie/550?api_key=${api_key}`)\r\n    // .then(response => response.json())\r\n    // .then(data => console.log(data));\r\n  \r\n    \r\n    // fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${api_key}&language=en-US&page=1`)\r\n    // .then(response => response.json())\r\n    // .then(data => {\r\n    //   console.log(data.results)\r\n    //   setPopularMovies(data.results)\r\n    //   console.log(popularMovies)\r\n    // }).then(\r\n    //   () => console.log(popularMovies)\r\n    // );\r\n  \r\n    console.log(popularMovies)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-3\">Search Page</h1>\r\n      <p className=\"lead\">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>\r\n      <hr className=\"my-4\" />\r\n      <p>It uses utility classNamees for typography and spacing to space content out within the larger container.</p>\r\n      <p className=\"lead\">\r\n        <a className=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Learn more</a>\r\n      </p>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useEffect, useState } from 'react'\r\n\r\nconst api_key = '8da605a5d9396912aa1f7532d10a9839'\r\n\r\n///\r\n/// Component displays movie detail\r\n///\r\nconst Movie = ({ match }) => {\r\n\r\n  /// DATA\r\n\r\n  const [movie, setMovie] = useState([])\r\n\r\n  /// SIDE EFFECTS\r\n\r\n  useEffect(() => {\r\n    // console.log(match.params.id)\r\n    fetchMovie(match.params.id)\r\n\r\n  }, [match.params.id])\r\n\r\n  /////////////////////////////////////////////\r\n\r\n  ///\r\n  /// Loads movie info by id\r\n  ///\r\n  const fetchMovie = async (id) => {\r\n     fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${api_key}`)\r\n    .then(response => response.json())\r\n    .then(data => setMovie(data))\r\n  }\r\n\r\n  const show = () => {\r\n    console.log(movie)\r\n  }\r\n\r\n  /////////////////////////////////////////////\r\n  /////////////////////////////////////////////\r\n\r\n  return (\r\n    <div>\r\n      <h1>{ movie.title }</h1>\r\n      <button onClick={show}>Show</button>\r\n      <img \r\n          style={{width: 500, display: 'block', padding: 10}} \r\n          src={`http://image.tmdb.org/t/p/w500//`.concat(movie.poster_path)} \r\n          alt=\"movie card\" \r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Movie\r\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nimport Welcome from './pages/welcome'\nimport Search from './pages/search'\nimport Movie from './pages/movie'\n\nimport './styles/bootstrap.min.css'\nimport './App.css';\n\nconst App = () => {\n\n  return (\n    <Router>\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <Link to=\"/\" className=\"navbar-brand\">Movies Viewer</Link>\n   \n            <form className=\"form-inline my-2 my-bd-0\">\n              <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\n              <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\n            </form>\n          </nav>\n        </header>\n\n        <div className=\"jumbotron\">    \n          <Switch>\n            <Route exact path='/' component={ Welcome }/>\n            <Route exact path='/search' component={ Search }/>\n            {/* <Route path='/movie' component={ Movie }/> */}\n            <Route exact path='/movie/:id' component={ Movie }/>\n          </Switch>\n        </div>\n      \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}